---
apiVersion: v1
kind: Service
metadata:
  name: fp-web
  labels:
    run: fp-web
spec:
  type: ClusterIP
  ports:
    - name: prometheus
      port: 8180
    - name: api
      port: 8080
  selector:
    app: fp-web

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: fp-web
spec:
  port:
    targetPort: api
  to:
    kind: Service
    name: fp-web
    weight: 100
  wildcardPolicy: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fp-web
  labels:
    app: fp-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fp-web
  template:
    metadata:
      labels:
        app: fp-web
    spec:
      containers:
        - name: fp-web
          image: integrationworkspace/fp-web:latest
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 9404
              protocol: TCP
          resources:
            requests:
              cpu: 1000m
              memory: 1000Mi
            limits:
              cpu: 1000m
              memory: 1000Mi
          env:
            - name: KAFKA_HOST
              value: kafka-cluster-kafka-bootstrap

---
apiVersion: v1
kind: Service
metadata:
  name: fp-repo-service
  labels:
    run: fp-repo-service
spec:
  type: ClusterIP
  ports:
    - name: prometheus
      port: 8180
    - name: camel-management-prometheus
      port: 9404
  selector:
    app: fp-repo-service

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fp-repo-service
  labels:
    app: fp-repo-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fp-repo-service
  template:
    metadata:
      labels:
        app: fp-repo-service
    spec:
      containers:
        - name: fp-repo-service
          image: integrationworkspace/fp-repo-service:latest
          ports:
            - containerPort: 8180
              protocol: TCP
            - containerPort: 9404
              protocol: TCP
          resources:
            requests:
              cpu: 2000m
              memory: 2000Mi
            limits:
              cpu: 2000m
              memory: 2000Mi
          env:
            - name: KAFKA_HOST
              value: kafka-cluster-kafka-bootstrap

---
apiVersion: v1
kind: Service
metadata:
  name: fp-commit-service
  labels:
    run: fp-commit-service
spec:
  type: ClusterIP
  ports:
    - name: prometheus
      port: 8180
  selector:
    app: fp-commit-service

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fp-commit-service
  labels:
    app: fp-commit-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fp-commit-service
  template:
    metadata:
      labels:
        app: fp-commit-service
    spec:
      containers:
        - name: fp-commit-service
          image: integrationworkspace/fp-commit-service:latest
          ports:
            - containerPort: 8180
              protocol: TCP
          env:
            - name: KAFKA_HOST
              value: kafka-cluster-kafka-bootstrap
            - name: CASSANDRA_HOST
              value: fp-cassandra

---
apiVersion: v1
kind: Service
metadata:
  name: fp-cassandra
  labels:
    run: fp-cassandra
spec:
  type: ClusterIP
  ports:
    - name: cql
      port: 9042
  selector:
    app: fp-cassandra

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fp-cassandra
  labels:
    app: fp-cassandra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fp-cassandra
  template:
    metadata:
      labels:
        app: fp-cassandra
    spec:
      containers:
        - name: cassandra
          image: cassandra:4
          args: ["-R"]
          ports:
            - containerPort: 9042
              protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: fp-prometheus
  labels:
    run: fp-prometheus
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
  selector:
    app: fp-prometheus

---
apiVersion: v1
kind: Service
metadata:
  name: fp-prometheus-external
  labels:
    run: fp-prometheus
spec:
  type: NodePort
  ports:
    - name: http
      port: 9090
      nodePort: 30090
  selector:
    app: fp-prometheus

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: fp-prometheus
spec:
  port:
    targetPort: http
  to:
    kind: Service
    name: fp-prometheus
    weight: 100
  wildcardPolicy: None


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fp-prometheus
  labels:
    app: fp-prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fp-prometheus
  template:
    metadata:
      labels:
        app: fp-prometheus
    spec:
      containers:
        - name: prometheus
          image: integrationworkspace/fp-prometheus:jbcn-latest
          args: ["--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--web.console.libraries=/usr/share/prometheus/console_libraries", "--web.console.templates=/usr/share/prometheus/consoles", "--web.config.file=/etc/prometheus/web.yml"]
          ports:
            - containerPort: 9090
              protocol: TCP
          volumeMounts:
            - mountPath: /prometheus
              name: prometheus
      volumes:
        - name: prometheus
          emptyDir: { }


---
apiVersion: v1
kind: Service
metadata:
  name: fp-grafana
  labels:
    run: fp-grafana
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3000
  selector:
    app: fp-grafana

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: fp-grafana
spec:
  port:
    targetPort: http
  to:
    kind: Service
    name: fp-grafana
    weight: 100
  wildcardPolicy: None


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fp-grafana
  labels:
    app: fp-grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fp-grafana
  template:
    metadata:
      labels:
        app: fp-grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana-oss
          ports:
            - containerPort: 3000
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana
          env:
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Admin"
      volumes:
        - name: grafana
          emptyDir: { }
